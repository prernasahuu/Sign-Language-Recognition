from google.colab import drive
drive.mount('/content/drive')
!unzip /content/drive/MyDrive/SLR/archive.zip
# Importing the Keras libraries and packages
from tensorflow.keras.applications.resnet50 import ResNet50
from tensorflow.keras.models import Model
from tensorflow.keras.preprocessing import image
from tensorflow.keras.layers import Input, Lambda ,Dense ,Flatten ,Dropout
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
%matplotlib inline
import os
import cv2
train_dir = "/content/training_set" #file-path-of-training-dataset.
eval_dir = "/content/test_set"
#Helper function to load images from given directories
def load_images(directory):
    images_test = [] #testing data
    labels = []   # initialize two empty lists to store images and labels. /training data
    for idx, label in enumerate(uniq_labels):
        for file in os.listdir(directory + "/" + label):
            filepath = directory + "/" + label + "/" + file #building the path for file
            image = cv2.resize(cv2.imread(filepath), (64, 64)) #reads the image using opencv and resizes it to 64x64 pixels.
            images_test.append(image)
            labels.append(idx)
    images_test = np.array(images_test)   #convert the lists to NumPy arrays.
    labels = np.array(labels)
    return(images_test, labels)    #returns the NumPy arrays containing images and labels.
uniq_labels = sorted(os.listdir(train_dir))
images, labels = load_images(directory = train_dir)
if uniq_labels == sorted(os.listdir(eval_dir)):
    X_eval, y_eval = load_images(directory = eval_dir)
#Training and Testing
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size = 0.2, stratify = labels)

n = len(uniq_labels)
train_n = len(X_train)
test_n = len(X_test)

print("Total number of signs ", n)
print("Number of training images: " , train_n)
print("Number of testing images: ", test_n)

eval_n = len(X_eval)
print("Number of evaluation images: ", eval_n)
#one hot encoding in 2D array
y_train = keras.utils.to_categorical(y_train) #it converts the class vector to binary matrix.
y_test = keras.utils.to_categorical(y_test)
y_eval = keras.utils.to_categorical(y_eval)
X_train = X_train.astype('float32')/255.0
X_test = X_test.astype('float32')/255.0
X_eval = X_eval.astype('float32')/255.0
#Initialising RESnet50
classifier_resnet = ResNet50(input_shape= (64,64,3),include_top=False,weights='imagenet')
#don't train existing weights for resnet50
for layer in classifier_resnet.layers:
    layer.trainable = False
#ResNet50
classifier2 = classifier2_resnet.output#head mode
classifier2 = Flatten()(classifier2)#elongating the pooling map
classifier2 = Dropout(0.6)(classifier2) #drops the training nodes for avoiding overfitting
classifier2 = Dense(units=36, activation='softmax')(classifier2) #dense where every input is connected to its output layer by weights.
#softmax: to predict the class of an input image.
model2 = Model(inputs = classifier_resnet.input , outputs = classifier2)
model2.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
mode2.summary() 
history2 = model2.fit(X_train, y_train, epochs =4, batch_size = 64,validation_data=(X_test,y_test))
score = model2.evaluate(x = X_test, y = y_test, verbose = 0)
print('Accuracy for test images:', round(score[1]*100, 3), '%')
score = model2.evaluate(x = X_eval, y = y_eval, verbose = 0)
print('Accuracy for evaluation images:', round(score[1]*100, 3), '%')

# summarize history for accuracy
plt.plot(history2.history['accuracy'])
plt.plot(history2.history['val_accuracy'])
plt.title('model accuracy of ResNet50')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# summarize history for loss
plt.plot(history2.history['loss'])
plt.plot(history2.history['val_loss'])
plt.title('model loss of ResNet50')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

!wget -q -O - ipv4.icanhazip.com
! streamlit run main.py & npx localtunnel --port 8501
